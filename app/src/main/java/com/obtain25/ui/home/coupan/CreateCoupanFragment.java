package com.obtain25.ui.home.coupan;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.widget.AppCompatButton;import androidx.fragment.app.Fragment;import com.obtain25.R;import com.obtain25.api.RetrofitHelper;import com.obtain25.model.SuccessModel;import com.obtain25.utils.PrefUtils;import com.obtain25.utils.ViewDialog;import java.util.HashMap;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class CreateCoupanFragment extends Fragment {    protected ViewDialog viewDialog;    EditText editText_Discount, editText_Rupee,editText_maxRupee;    AppCompatButton btn_login;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view = inflater.inflate(R.layout.fragment_create_coupan, container, false);        viewDialog = new ViewDialog(getActivity());        viewDialog.setCancelable(false);        editText_Discount = view.findViewById(R.id.editText_Discount);        editText_Rupee = view.findViewById(R.id.editText_Rupee);        editText_maxRupee = view.findViewById(R.id.editText_maxRupee);        btn_login = view.findViewById(R.id.btn_login);        btn_login.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                NewCoupanGenerate();            }        });        return view;    }    public void NewCoupanGenerate() {        final String discount = editText_Discount.getText().toString().trim();        final String amount = editText_Rupee.getText().toString().trim();        final String maxamount = editText_maxRupee.getText().toString().trim();        if (discount.isEmpty()) {            editText_Discount.setError("Discount Value Required");            editText_Discount.requestFocus();            return;        } else if (amount.isEmpty()) {            editText_Rupee.setError("Minumum Amount Required");            editText_Rupee.requestFocus();            return;        } else if (maxamount.isEmpty()) {           editText_maxRupee.setError("Maximum Amount Required");           editText_maxRupee.requestFocus();            return;        } else {            HashMap<String, String> hashMap = new HashMap<>();            hashMap.put("discount_value", discount + "");            hashMap.put("minimum_amount", amount + "");            hashMap.put("maximum_amount", maxamount + "");            hashMap.put("discount_type", "Amount");            hashMap.put("restaurant_id", PrefUtils.getUser(getActivity()).getSessionData().getId());            showProgressDialog();            Call<SuccessModel> loginModelCall = RetrofitHelper.createService(RetrofitHelper.Service.class).CreateCoupon(hashMap);            loginModelCall.enqueue(new Callback<SuccessModel>() {                @Override                public void onResponse(@NonNull Call<SuccessModel> call, @NonNull Response<SuccessModel> response) {                    SuccessModel object = response.body();                    hideProgressDialog();                    if (object != null && object.getError() == false) {                        Toast.makeText(getActivity(), object.getMsg(), Toast.LENGTH_SHORT).show();                    } else if (object != null && object.getError() == true) {                        Toast.makeText(getActivity(), object.getMsg(), Toast.LENGTH_SHORT).show();                    }                }                @Override                public void onFailure(@NonNull Call<SuccessModel> call, @NonNull Throwable t) {                    hideProgressDialog();                    t.printStackTrace();                }            });        }    }    protected void hideProgressDialog() {        viewDialog.dismiss();    }    protected void showProgressDialog() {        viewDialog.show();    }}